Column Restricting query - Having specific coloumn name instead of using * 
	ex. SELECT first_name,last_name FROM employees;
Row Restricting Query - Having where clause
	ex. SELECT * FROM employees WHERE department_id=60;
----------------------------------------------------------------------------------------------------------------------

ex. SELECT * from employees where commission_pct is not null
	AND first_name like 's_n%'				-- % REPRESENTS any combination of letters
	order by first_name desc, last_name desc;		-- _ REPRESENTS single unknown letter

----------------------------------------------------------------------------------------------------------------------
	ASSESSMENT PATTERN
		100 Marks Total
			30 marks for MCQ
			70 marks for queries
				3 	10 marks (easy)
				2	12.5 marks (avg)
				1 	15 marks (complex)


----------------------------------------------------------------------------------------------------------------------
			PRACTICE QUESTIONS
use hr;

show tables;

select * from employees;

-- Display the first name and join date of the employees who joined between 1998 and 2000.
SELECT first_name,hire_date from employees where YEAR(hire_date) between 1998 and 2000;

-- Display first name and join date of the employees who is either IT Programmer or Sales Man
SELECT first_name,hire_date from employees where job_id='IT_PROG' OR job_id='SA_MAN';

--  Display all details of employees whose employee id is 100 and 150
SELECT * from employees where employee_id between 100 and 150;

-- Display first name, last name and salary of all employees who is earning less than 10000
SELECT first_name,last_name,salary from employees where salary<10000;

-- Display all details of the employees sorted based on their job_id,
SELECT * from employees order by job_id;

-- Display all details of the employees whose first name and last name start with S
SELECT * from employees where first_name like 's%' and last_name like 's%';

-- Display all the details of the employees who earn more than 21000
SELECT * from employees where salary>21000;

-- Display all the details of the employees who earn between 5000 and 10000
SELECT * from employees where salary between 5000 and 10000;

-- Display all the details of the employees who earn between 5000 and 10000 and all of them belong to department id 30
SELECT * from employees where department_id = 30 and salary between 5000 and 10000;

-- Display the employees first name and sum of salary and commission_pct.
SELECT first_name, salary+IFNULL(commission_pct, 0) as SUM from employees group by first_name;



---------------------------------------------------------------------------------------------------------------------

		TYPES OF DATABASES

	- Document-oriented Database
	- Embedded Database
	- Graph Database
	- Hypertext Database
	- Operational Database
	- Distribured Databse
 	- Flat-file

		WHAT IS A DBMS

	-It is a collection of interrelated data
	-Set of programs to access the data
	-Contains information about a particular enterprise
	-Provides environment that is both convient and efficient to use
	-defines rule to validate and manipulate te data
	-it relieves uses of framing programs for data maintenance.

		Three level DBMS Architecture

	- Internal level - how data is actually stored in physical devices
	- Conceptual level - connects views, it contains all major entities 
	- External level - views from the users

		ACID PROPERTIES

	- ATOMICITY - stats a transaction is an indivisible unit that is 
			either performed as a whole not in part, or either unperformed at all

	- CONSISTENCY - Transaction must alter the databse from one state to another

	- ISLOATION - Transactions must be executed independently of one another
 
	- DURABILITY - 

		DATA MODEL

	- THE CONCEPTUAL MODEL - it contains all major entities(TABLES)
	- THE LOGICAL MODEL - it contains all attributes(COLUMNS)
	- THE PHYSICAL MODEL - you actually create here


----------------------------------------------------------------------------------------------------------------------
						EXERCISE
----------------------------------------------------------------------------------------------------------------------

SHOW TABLES;
DESC account_master;
DESC branch_master;
DESC customer_master;
DESC loan_details;
DESC transaction_details;

SELECT * FROM transaction_details;
SELECT * FROM branch_master;
SELECT * FROM customer_master;
SELECT * FROM account_master;
SELECT * FROM loan_details;

-- Write a query to display account number, customer’s number, customer’s firstname,lastname,
-- account opening date.
-- Display the records sorted in ascending order based on account number.

        SELECT A.account_number,A.customer_number,FIRSTNAME,LASTNAME,account_opening_date 
            FROM account_master A 
                INNER JOIN customer_master C 
                    ON A.customer_number=C.customer_number;

-- Write a query to display the number of customer’s from Delhi. 
-- Give the count an alias name of Cust_Count

        SELECT COUNT(*) AS CUST_COUNT 
            FROM customer_master 
                WHERE customer_city='DELHI';

-- Write a query to display  the customer number, customer firstname,account number for the 
-- customer’s whose accounts were created after 15th of any month.
-- Display the records sorted in ascending order based on customer number and 
-- then by account number.

        SELECT C.customer_number,FIRSTNAME,account_number 
            FROM customer_master C 
                INNER JOIN account_master A ON C.customer_number=A.customer_number 
                    WHERE DAY(account_opening_date)>15 
                        order by customer_number;

-- Write a query to display customer number, customer's first name, account number 
-- where the account status is terminated.
-- Display the records sorted in ascending order based on customer number and 
-- then by account number

        SELECT A.customer_number,firstname,account_number 
            FROM customer_master C 
                inner join account_master A ON A.customer_number=C.customer_number 
                    where account_status='TERMINATED';
            
-- Write a query to display  the total number of  withdrawals and total number of deposits 
-- being done by customer whose customer number ends with 001. 
-- The query should display transaction type and the number of transactions. 
-- Give an alias name as Trans_Count for number of transactions. 
-- Display the records sorted in ascending order based on transaction type.

        SELECT transaction_type,COUNT(transaction_type) as TRANS_COUNT
            FROM transaction_details T 
                inner join account_master A ON T.account_number = A.account_number 
                    where customer_number like '%001' 
                        group by transaction_type 
	                        order by transaction_type;
                        
-- Write a query to display the number of customers who have registration 
-- but no account in the bank.
-- Give the alias name as Count_Customer for number of customers

        SELECT COUNT(CUSTOMER_NUMBER) AS Count_Customer 
            FROM customer_master 
                where CUSTOMER_NUMBER 
                    NOT IN(SELECT CUSTOMER_NUMBER FROM account_master);
    
-- Write a query to display account number and total amount deposited by each account holder
-- ( Including the opening balance ). 
-- Give the total amount deposited an alias name of Deposit_Amount.  
-- Display the records in sorted order based on account number

        SELECT A.account_number,opening_balance + sum(transaction_amount) AS Deposit_Amount
            FROM account_master A 
                inner join transaction_details T on A.account_number=T.account_number 
                    where transaction_type='DEPOSIT'
                        group by account_number 
                            order by A.account_number;
                            
-- Write a query to display the number of accounts opened in each city .
-- The Query should display Branch City  and number of accounts as No_of_Accounts.
-- For the branch city where we don’t have any accounts opened display 0. 
-- Display the records in sorted order based on branch city.

        SELECT branch_city,COUNT(account_number) AS No_of_Accounts
            FROM account_master A 
                RIGHT JOIN branch_master B on A.branch_id = B.branch_id 
                    GROUP BY branch_city order by branch_city;
                    
-- Write  a query to display the firstname of the customers who have more than 1 account. 
-- Display the records in sorted order based on firstname.

        SELECT firstname 
            FROM customer_master C 
                inner join account_master A on C.customer_number= A.customer_number
                    group by A.customer_number 
                        having count(A.customer_number)>1 
                            order by firstname;
                        
-- Write a query to display the customer number, customer firstname, customer lastname 
-- who has taken loan from more than 1 branch.
-- Display the records sorted in order based on customer number.

        SELECT C.customer_number,firstname,lastname 
            FROM loan_details L 
                INNER JOIN customer_master C ON C.customer_number = L.customer_number
                    group by customer_number
                        having count(L.customer_number)>1 
                            order by customer_number;

-- Write a query to display the customer’s number, customer’s firstname, customer’s city and 
-- branch city where the city of the customer and city of the branch is different. 
-- Display the records sorted in ascending order based on customer number.

        SELECT C.customer_number,C.firstname,C.customer_city,B.branch_city
            FROM customer_master C 
                INNER JOIN account_master A ON C.customer_number = A.customer_number
                    INNER JOIN branch_master B ON A.branch_id = B.branch_id
                        WHERE customer_city!=branch_city 
                            ORDER BY C.customer_number;

-- Write a query to display the number of clients who have asked for loans but 
-- they don’t have any account in the bank though they are registered customers. 
-- Give the count an alias name of Count.

        SELECT count(customer_number) AS COUNT 
            FROM customer_master where customer_number
                NOT IN (SELECT customer_number FROM account_master)
                    AND customer_number IN (SELECT customer_number from loan_details);
		    


----------------------------------------------------------------------------------------------------------------------
							DAY 7/18/2018
----------------------------------------------------------------------------------------------------------------------

	DDL - Data definiton language (CREATE ALTER DROP TRUNCATE)	autocommit
				{ Tables,	Views	}
	
	DML - Data Manipulation Language	( INSERT UPDATE DELETE	) undo
					

	DCL - Data Control Language (GRANT	REVOKE	)
							
	TCL - Transaction Control language	(ROLLBACK	COMMIT	SAVEPOINT	)
	
	DQL - Data Query ( SELECT	)
					


CREATE DATABASE DW031;

USE DW031;

CREATE TABLE STUDENT(
    roll int,
    name varchar(20)
);       
 
desc student;        -- displays table structure
 
ALTER TABLE student 
 add column dob date;
 
ALTER TABLE student
 change dob date_of_birth date;
 
ALTER TABLE student
 change name name varchar(30);
 
ALTER TABLE student
 add constraint primary key (name);
 
create table test(
    id int,
    id2 int,
    primary key (id,id2)
);

desc test;


create table test2(
    id int primary key auto_increment,
    name varchar(20)
);
    
desc test2;

INSERT INTO TEST2(NAME) 
VALUES('sharma');

SELECT * FROM TEST2;

use dw031;

UPDATE test2
set name='Sharma' where id=2 ;

delete from test2 where name like 'sharma';
rollback;


-- GRANT and REVOKE

	create user devil identified by 'dEVILs';

	GRANT SELECT,INSERT,UPDATE,DELETE on database_name.table_name to user_name;
			(*)

	REVOKE SELECT,INSERT,UPDATE,DELETE on database_name.table_name from user_name;


-- TRUNCATE and DROP
		
	TRUNCATE table test2;		-- deletes all records
	
	DROP table test2;		-- deletes the whole table



----------------------------------------------------------------------------------------------------------------------
						NORMALIZATION
----------------------------------------------------------------------------------------------------------------------


























----------------------------------------------------------------------------------------------------------------------

					SUBSTRING and SUBSTRING_INDEX

	SELECT substr(column_name,start_position) from table_name;
	
	SELECT substr(column_name,start_position,end_position) from table_name;	

	
	SELECT substring_index(column_name,'@',position) FROM employees;        
		-- Returns the substring before the 'position'th occurence of @

	
	SELECT concat(column_name1,column_name2) from table_name;

	SELECT concat(column_name1,' ',column_name2) from table_name;

----------------------------------------------------------------------------------------------------------------------
		
		select 7/9,round(7/9,2),ceil(7/9),floor(7/9);

----------------------------------------------------------------------------------------------------------------------
	-- DATE functions

	select date('2101'-01-01)

	select date('2101-01-01');
    
    select year(current_date());
    select month(current_date());
    select day(current_date());
    
    select last_day(current_date());
    
    select current_date(),current_date()+17;
    
    select current_date()-6,adddate(current_date(),14);

---------------------------------------------------------------------------------------------------------------------

			select ifnull(first_column,0)  -- if first_column is null returns 0 otherwise first_column1
			select nullif(1,1)  -- if both are equal return NULL


----------------------------------------------------------------------------------------------------------------------
								19-July-2018	IF,IFNULL,COALESCE
----------------------------------------------------------------------------------------------------------------------

	use hr;

	select first_name,commission_pct from employees;

	select first_name,if(commission_pct is NULL,'No Commission', commission_pct) COMMISSION from employees;

	select first_name,salary from employees;

	select first_name,if(salary>10000,'Good','Not Good') from employees;

	select first_name,ifnull(commission_pct,0) from employees;

	use dw031;

	create table customer
	(	
	    id int primary key auto_increment,
	    name varchar(20) not null,
	    mobile varchar(20),
	    land_line varchar(20),
	    email varchar(20),
	    address varchar(20)
	);

	insert into customer(name,mobile) values ('Rustom Bavri','9876543210');
    
	insert into customer(name,land_line) values ('Harish chand','0120-4201858');

	insert into customer(name,email) values ('Akash Chopra','chopra@hotmail.com');

	insert into customer(name,address) values ('Ravi Shashtri','#23 VijayNagar');

	insert into customer(name,mobile,land_line) values ('Kapil dev','9944115577',  '011-223366987 ');

	insert into customer(name) values ('Sachin Tendulkar');

	select * from customer;

	select name, coalesce(mobile,land_line,email,address) contact from customer;
	    -- coalesce displays first column if no data in first column then second and so on.
    
	insert into customer(name,address) values ('Rani','12,Thane,Mumbai,421301');
    
    	insert into customer(name,address) values ('ajay','12,3rd cross ,Chennai,606905');
    
    	insert into customer(name,address) values ('Teja','12,Hinjiwadi,Pune,411033');
    
	insert into customer(name,address) values ('Kiran','23,Lake park,Kolkata,700020');
    
    	insert into customer(name,address) values ('Uma','24,TVS col,Madurai,664051');
    
    	select substr(address,length(address)-5) from customer;
    
    	select substring_index(address,',',3) from customer;
    
    	-- Extract city from address
	select substring_index(reverse(substring_index(reverse(address),',',2)),',',1) address 
	    from customer;
    
    
    
    
    	use hr;
    
    	select salary from employees order by salary desc limit 1 offset 2;
        	    -- offset is starting from Nth record 
	    select salary from employees order by salary desc limit 2,1;      
	    -- here limit is the last number that you give
    
    	select max(salary) from employees;
    
    	select min(salary) from employees;
    
    	select avg(salary) from employees;
    
    	select count(*) from employees;
    
    	select sum(salary) from employees;

	select department_id,sum(salary) 
    		from employees                  -- employee salary
		where salary>10000
		group by department_id;
    
	select department_id,sum(salary) 
	    from employees                  -- department salary
	    group by department_id
	    having sum(salary)>10000;
    

------------------------------------------------------------------------------------------------------------------------------------------------------------
									SWITCH CASE IN MYSQL
------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	USE dw031;
    
    create table products
    (
        id int primary key auto_increment,
        name varchar(50)
        );
    insert into products(name) values('G'),
    ('KW'),
    ('To'),
    ('Bk'),
    ('Bev'),
    ('Cl'),
    ('Me');
    
    select * from products;
    -- case
    select id,
        case
            when name like 'G' then 'Guruji'
            when name like 'KW' then 'Kitchen Ware'
            when name like 'To' then 'Tools'
            when name like 'Bk' then 'Bakery'
            when name like 'Bev' then 'Beverages'
            when name like 'Cl' then 'Clothes'
            when name like 'Me' then 'Media'
        end Description
    from products;
    
    
    use hr;
    select first_name,
        case
            when salary between 500 and 10000 then 'Good'
            when salary between 10001 and 20000 then 'Not Bad'
            when salary >20000 then 'Very Good'
        end comments
    from employees;


----------------------------------------------------------------------------------------------------------------------------------------------------------
									JOINS
-----------------------------------------------------------------------------------------------------------------------------------------------------------

	The concept to reterive multiple columns from two or more tables
		types:- 
			theta, where
			
			2000 ANSI JOIN
		INNER JOIN
			
			equi	=
			non-equi	> <			
			self
			natural

		OUTER JOIN	
			
			cross	X
			outer
				left
				right
				full

			j = t-1      -- join = number of tables - 1


		SYNTAX --		SELECT columns,columns 
					FROM table1 join table2
					ON condition


		  use hr;
    
  		  select * from employees;
    
    		select *  from departments;
  
  		-- EQUI JOIN
			select first_name,department_name 
			from employees join departments
			on employees.department_id=departments.department_id;

			select first_name,department_name 
			    from employees e join departments d
			    on e.department_id=d.department_id;
    
		    -- natural join 5 10 5
			    select first_name,department_name 
			    from employees natural join departments;
    
		    -- cross join 5 10 50
			    select first_name,department_name 
			    from employees cross join departments;
    
		    -- self join
			    select emp.first_name Employee,mgr.first_name Manager
			    from employees emp 
			    join employees mgr
			    on emp.manager_id=mgr.employee_id;
    
		    -- left outer
    			    select first_name,department_name 
     	 		    from employees e left join departments d
			    on e.department_id=d.department_id;
    
    		    -- right outer
    			    select first_name,department_name 
  			    from employees e right join departments d
  			    on e.department_id=d.department_id;
    
		select * from employees;
    
    		select * from jobs;
    
		    -- display the first name and the job title of all employees
		    select first_name,job_title 
		    from employees e
		    join jobs j
		    on e.job_id = j.job_id;
    
		    -- display the first name and city of the employees
		    select first_name, city, country_name from employees e
		    join departments d on e.department_id=d.department_id
		    join locations l
		    on l.location_id=d.location_id
		    join countries c
		    on l.country_id=c.country_id;select nullif(11,2) -- if both are not equal returns first_column		    


----------------------------------------------------------------------------------------------------------------------
					21-July-2018
----------------------------------------------------------------------------------------------------------------------

	set operators
		union		--	display all values without duplicates			-- in mysql
		union		--	display all values					-- in mysql
	
		minus		--	a -b							-- in oracle
		intersect	--	common in a and b					-- in oracle
	


SYNTAX
	first select
	set
	second select

CONDITION	
	1. both the select queries should carry equal number of columns

	select id from emp
	union					// wont work as it has unequal number of columns
	select id,name from emp			

	2. the columns in both the select query should have the same data types

	select id from emp
	union					//won't work differnt data types of columns
	select name from dept

--------------------------------------------------------------------------------------------------------------------
						SUB-QUERIES
--------------------------------------------------------------------------------------------------------------------

	inner query or nested queries.
	outer(inner)
	
	first the inner query works and reuturns an output to the outer query,
	then the outer query works on the given input.

	=
	<
	>
	in
	all
	any
	exists
	not exists


	CORRELATED SUBQUERIES
	the outer query works first and then the inner query

	INLINE VIEW
	this query works like a subquery but can extract a column or a set of columns
	from the query.
		
	SINGLE ROW SUB-QUERIES
	
	select first_name from employees
	where salary=(select max(salary) from employees);

	select first_name 
	from employees 
	where department_id=
	(select department_id from departments 
	where department_name='Sales');

	select first_name from employees where
	department_id in 
	(select department_id from departments 
	where department_name in ('Sales','it','SHIPPING'));

	
	-- display all the employee's first name those are earning more than average salary

	select first_name from employees 
	where salary>
	(select avg(salary) from employees);

	-- can be worked with create , insert, update, delete
	-- create table using sub-query
	
	create table emp_sales
	as
	select * from employees where department_id=
	(select department_id from departments 
	where department_name like 'sales');

	-- create an empty table with structure

	create table emp_it
	as
	select * from employees where 1=2;

	-- inserting records into an empty table
	
	insert into emp_it
	select * from employees where department_id=60;

	
CREATE TABLE loan_card_master
(
	loan_id				int(6)		PRIMARY KEY,
	loan_type			varchar(20),
	duration_in_years	int(2)
);

CREATE TABLE employee_master
(
	employee_id 		varchar(10)		PRIMARY KEY,
	employee_name		varchar(30),
	designation			varchar(255),
	
	department			varchar(255),
gender				varchar(6),
	date_of_birth		date,
	date_of_joining		date
);

CREATE TABLE item_master
(
	item_id				varchar(10)		PRIMARY KEY,
	item_description	varchar(50),
	issue_status		varchar(10),
	item_make			varchar(20),
	item_category		varchar(20),
	item_valuation		double(7,2)
);

CREATE TABLE employee_card_details
(
	employee_id 		varchar(10) 	REFERENCES 	employee_master,
	loan_id				varchar(10)		REFERENCES	loan_card_master,
	card_issue_date		date
);

CREATE TABLE employee_issue_details
(
	issue_id			varchar(10)		PRIMARY KEY,
	employee_id 		varchar(10) 	REFERENCES 	employee_master,
	item_id				varchar(10)		REFERENCES	item_master,
	issue_date			date,
	return_date			date	
);

insert into loan_card_master
values('00001','stationary',5);
insert into loan_card_master
values('00002','recurring',0);
insert into loan_card_master
values('00003','Crockery',1);



insert into employee_master 
values('E00001','Ram','Manager','Finance','M','1973-12-01','2001-01-01');

insert into employee_master 
values('E00002','Abhay','Assistant Manager',
'Finance','M','1976-01-01','2006-12-01');

insert into employee_master 
values('E00003','Anita','Senior Executive','Marketing','F','1977-05-12','2007-03-21');

insert into employee_master 
values('E00004','Zuben','Manager','Marketing','M','1974-10-12','2003-07-23');

insert into employee_master 
values('E00005','Radica','Manager','HR','F','1976-07-22','2004-01-23');

insert into employee_master 
values('E00006','John','Executive','HR','M','1983-11-08','2010-05-17');




insert into item_master 
values ('I00001','Tea Table','Y','Wooden','furniture',5000);

insert into item_master 
values ('I00002','Dining Table','N','Wooden','furniture',15000);

insert into item_master 
values ('I00003','Tea Table','N','Steel','furniture',6000);

insert into item_master 
values ('I00004','Side Table','Y','Wooden','furniture',2000);

insert into item_master 
values ('I00005','Side Table','Y','Steel','furniture',1500);

insert into item_master 
values ('I00006','Tea Table','N','Steel','furniture',7000);

insert into item_master 
values ('I00007','Dining Chair','Y','Wooden','furniture',1500);

insert into item_master 
values ('I00008','Tea Table','Y','Wooden','furniture',4000);

insert into item_master 
values ('I00009','Sofa','N','Wooden','furniture',18000);

insert into item_master 
values ('I00010','Cupboard','Y','Steel','furniture',10000);

insert into item_master 
values ('I00011','Cupboard','N','Steel','furniture',14000);


insert into item_master 
values ('I00012','Double Bed','Y','Wooden','furniture',21000);

insert into item_master 
values ('I00013','Double Bed','Y','Wooden','furniture',20000);

insert into item_master 
values ('I00014','Single Bed','Y','Steel','furniture',10000);

insert into item_master 
values ('I00015','Single Bed','N','Steel','furniture',10000);


insert into item_master 
values ('I00016','Tea Set','Y','Glass','Crockery',3000);

insert into item_master 
values ('I00017','Tea Set','Y','Bonechina','Crockery',4000);

insert into item_master 
values ('I00018','Dining Set','Y','Glass','Crockery',4500);

insert into item_master 
values ('I00019','Dining Set','N','Bonechina','Crockery',5000);

insert into item_master 
values ('I00020','Pencil','Y','Wooden','Stationary',5);

insert into item_master 
values ('I00021','Pen','Y','Plastic','Stationary',100);

insert into item_master 
values ('I00022','Pen','N','Plastic','Stationary',200);




insert into employee_card_details
values('E00001','00001','2000-01-01');

insert into employee_card_details
values('E00001','00002','2000-01-01');

insert into employee_card_details
values('E00001','00003','2002-12-14');

insert into employee_card_details
values('E00002','00001','2007-02-01');



insert into employee_card_details
values('E00002','00002','2007-03-11');

insert into employee_card_details
values('E00003','00001','2007-04-15');

insert into employee_card_details
values('E00003','00002','2007-04-15');

insert into employee_card_details
values('E00003','00003','2007-04-15');



insert into employee_issue_details
values('ISS001','E00001','I00001','2012-02-03','2014-02-03');
insert into employee_issue_details
values('ISS002','E00001','I00004','2012-02-03','2020-02-03');

insert into employee_issue_details
values('ISS003','E00002','I00005','2013-01-03','2015-01-03');
insert into employee_issue_details
values('ISS004','E00003','I00007','2010-07-04','2012-07-04');


insert into employee_issue_details
values('ISS005','E00003','I00008','2010-07-04','2012-08-05');

insert into employee_issue_details
values('ISS006','E00003','I00010','2012-03-14','2012-06-15');

insert into employee_issue_details
values('ISS007','E00004','I00012','2013-04-14','2016-04-14');

insert into employee_issue_details
values('ISS008','E00006','I00018','2012-08-18','2019-04-17');

insert into employee_issue_details
values('ISS009','E00004','I00018','2013-04-18','2013-05-18');

---------------------------------------------------------------------------------------------------------------------------------------
				23-07-2018
---------------------------------------------------------------------------------------------------------------------------------------
show tables;
desc employee_card_details;
desc employee_issue_details;
desc employee_master;
desc item_master;
desc loan_card_master;

select * from item_master;
select * from employee_master;
select * from loan_card_master;
select * from employee_issue_details;
select * from employee_card_details;

-- Write a query to display category and number of items in that category. 
-- Give the count an alias name of Count_category. 
-- Display the details on the sorted order of count in descending order

select item_category,count(item_id) as Count_category 
from item_master 
group by item_category
order by 2 desc;


-- Write a query to display the number of employees in HR department. 
-- Give the alias name as No_of_Employees

select count(employee_id) as No_of_Employees 
from employee_master
where department='HR';


-- Write a query to display employee id, employee name, designation and department for employees 
-- who have never been issued an item as a loan from the company. 
-- Display the records sorted in ascending order based on employee id

select em.employee_id,employee_name,designation,department from employee_master em
where em.employee_id NOT IN (select employee_id from employee_card_details ecd);


-- Write a query to display the employee id, employee name who was issued an item 
-- of highest valuation.
-- In case of multiple records, display the records sorted in ascending order 
-- based on employee id.
-- [Hint Suppose an item called dinning table is of 22000 and that is the 
-- highest price of the item that has been issued. So display the employee id and 
-- employee name who issued dinning table whose price is 22000.]

    select employee_id,employee_name from employee_master where employee_id=(
    select employee_id from employee_issue_details where item_id=(
    select item_id from item_master where item_valuation=(select max(item_valuation) from item_master where issue_status='Y')));
    
    -- Please follow instructions given below.
    -- Write a query to display issue_id, employee_id, employee_name.
    -- Display the records sorted in ascending order based on issue id

    select eid.issue_id,eid.employee_id,employee_name from employee_issue_details eid 
    join employee_master em on em.employee_id=eid.employee_id
    order by 1;
    
    -- Write a query to display employee id, employee name who don’t have loan cards.
    -- Display the records sorted in ascending order based on employee id.

    select employee_id,employee_name 
    from employee_master 
    where employee_id not in (select distinct employee_id from employee_card_details)
    order by employee_id;
    
    
    -- Write a query to count the number of cards issued to an employee “Ram”.  
    -- Give the count an alias name as No_of_Cards
    
    select count(employee_id) as No_of_Cards from employee_card_details 
    where employee_id=
    (select employee_id from employee_master where employee_name='Ram');


    -- Write a query to display the count of customers who have gone for loan type stationary. 
    -- Give the count an alias name as Count_stationary
    
    
    select count(employee_id) Count_stationary from loan_card_master lcm
    join employee_card_details ecd on lcm.loan_id=ecd.loan_id 
    where loan_type= 'stationary';
    
    
    -- Write a query to display the employee id, employee name and number of items issued to them. 
    -- Give the number of items an alias name as Count. Display the details in descending order of count and then 
    -- by employee id in ascending order. Consider only employees who have been issued atleast 1 item
    
    select em.employee_id,em.employee_name,count(eid.item_id) as Count 
    from employee_issue_details eid
    join employee_master em on em.employee_id=eid.employee_id
    group by em.employee_id
    having count(eid.item_id)>=1
    order by 3 desc,1 asc;
    
    
    -- Write a query to display the employee id, employee name who was issued an item of minimum valuation.
    -- In case of multiple records, display them sorted in ascending order based on emp loyee id.
    -- [Hint Suppose an item called pen is of rupees 20 and that is the lowest price. 
    -- So display the employee id and employee name who issued pen where the valuation is 20.
    
    select em.employee_id,em.employee_name from employee_master em
    join employee_issue_details eid on em.employee_id=eid.employee_id
    where eid.item_id IN (
    select item_id from item_master where item_valuation=(select min(item_valuation) from employee_issue_details eid
    join item_master im on eid.item_id=im.item_id))
    order by 1;
    
    
    -- Write a query to display the employee id, employee name and total valuation of the product issued to each employee.
    -- Give the alias name as TOTAL_VALUATION.
    -- Display the records sorted in ascending order based on employee id.
    -- Consider only employees who have been issued atleast 1 item
    
    select em.employee_id,em.employee_name,sum(item_valuation) as TOTAL_VALUATION from employee_master em
    join employee_issue_details eid on em.employee_id=eid.employee_id
    join item_master im on im.item_id=eid.item_id
    group by em.employee_id 
    order by 1;
    
    -- Write a query to display distinct employee id, employee name who kept the item issued for more than a year.
    -- Hint: Use Date time function to calculate the difference between item issue and return date. 
    -- Display the records only if it is more than 365 Days.
    -- Display the records sorted in ascending order based on employee id

    select distinct em.employee_id,em.employee_name from employee_issue_details eid
    join employee_master em on em.employee_id=eid.employee_id where addDate(issue_date,365)<return_date
    order by 1;
    
    
    -- Write a query to display employee id, employee name and count of items of those who asked 
    -- for more than 1 furniture. Give the alias name for count of items as COUNT_ITEMS.
    -- Display the records sorted in ascending order on employee id.

    select em.employee_id,em.employee_name,count(im.item_id) as COUNT_ITEMS from employee_issue_details eid
    join employee_master em on eid.employee_id = em.employee_id
    join item_master im on im.item_id=eid.item_id
    where im.item_category='furniture'
    group by em.employee_id
    having COUNT_ITEMS>1
    order by 1;
    
    -- Write a query to display the number of men & women Employees. 
    -- The query should display the gender and number of Employees as No_of_Employees. 
    -- Display the records sorted in ascending order based on gender
    
    select gender,count(employee_id) as No_of_Employees from employee_master
    group by gender order by gender;
    
    -- Write a query to display employee id, employee name who joined the company after 2005. 
    -- Display the records sorted in ascending order based on employee id
    
    select employee_id,employee_name from 
    employee_master em where year(date_of_joining)>2005
    order by 1;
    
    -- Write a query to get the number of items of the furniture category issued and not issued. 
    -- The query should display issue status and the number of furniture as No_of_Furnitures.
    -- Display the records sorted in ascending order based on issue_status

    select issue_status,count(item_id) as No_of_furniture from item_master im
    where  item_category = 'furniture'
    group by issue_status
    order by issue_status;
    
    
    -- Write a query to find the number of items in each category, make and description. 
    -- The Query should display Item Category, Make, description and the number of items as No_of_Items. 
    -- Display the records in ascending order based on Item Category, then by item make and then by item description
    
    select item_category,item_make,item_description,count(item_description)
    from item_master
    group by item_description,item_make
    order by item_category,item_make,item_description;
    
    
    -- Write a query to display employee id, employee name, item id and item description of employees 
    -- who were issued item(s)
    -- in the month of January 2013. Display the records sorted in order based on employee id and then by item id 
    -- in ascending order
    
    select em.employee_id,employee_name,im.item_id,item_description from employee_issue_details eid
    join employee_master em on em.employee_id=eid.employee_id
    join item_master im on im.item_id=eid.item_id
    where eid.issue_date like '2013-01%'
    order by employee_id,item_id;
    
    
    -- Write a query to display the employee id, employee name and count of item category of the employees 
    -- who have been issued items in at least 2 different categories.
    -- Give the alias name for category count as COUNT_CATEGORY.
    -- Display the records sorted in ascending order based on employee id

    select em.employee_id,em.employee_name,count(im.item_category) as COUNT_CATEGORY from employee_master em   
    join employee_issue_details eid on eid.employee_id=em.employee_id
    join item_master im on im.item_id=eid.item_id
    GROUP BY im.item_category
    having count(im.item_category)<=2
    order by em.employee_id;
    
    -- Write a query to display the item id , item description which was never issued to any employee. 
    -- Display the records sorted in ascending order based on item id
    
    select im.item_id,im.item_description from item_master im
    where im.item_id not in (select Item_id from employee_issue_details)
    order by 1;
    
    -- Write a query to display the employee id, employee name and  total valuation; 
    -- for the employees who has issued minimum total valuation of the product.  
    -- Give the alias name for total valuation as TOTAL_VALUATION.
    -- [Hint: Suppose an employee E00019 issued item of price 5000, 10000, 12000 and 
    -- E00020 issue item of price 2000, 7000 and 1000. So the valuation of items taken by E00019 is 27000 and
    -- for E00020 it is 10000. So the employee id, employee name of E00020 should be displayed. ]

    select em.employee_id,em.employee_name,sum(item_valuation) TOTAL_VALUATION
    from employee_master em
    join employee_issue_details eid on em.employee_id=eid.employee_id
    join item_master im on im.item_id=eid.item_id
    group by em.employee_id
    order by 3 limit 1;
    
    -- Write a query to display the employee id, employee name, card issue date and card valid date.
    -- Order by employee name and then by card valid date. 
    -- Give the alias name to display the card valid date as CARD_VALID_DATE.
    -- [Hint:  Validity in years for the loan card is given in loan_card_master table. 
    -- Validity date is calculated by adding number of years in the loan card issue date. 
    -- If the duration of year is zero then display AS 'No Validity Date'. ]

    select em.employee_id,em.employee_name,ecd.card_issue_date,(select 
    CASE lcm.duration_in_years
        WHEN 0 then 'No Validity Date'
        ELSE adddate(card_issue_date, INTERVAL lcm.duration_in_years year) 
        END) as CARD_VALID_DATE
    from employee_master em
    join employee_card_details ecd on ecd.employee_id=em.employee_id
    join loan_card_master lcm on lcm.loan_id=ecd.loan_id
    order by employee_name,4;

	-- Write a query to display the employee id, employee name who have not issued with any item  in the year 2013. 
    -- Hint: Exclude those employees  who  was  never issued with any of the items in all the years. 
    -- Display the records sorted in ascending order based on employee id
    
    SELECT distinct em.employee_id,employee_name from employee_master em
    join employee_issue_details eid on em.employee_id=eid.employee_id
    where year(issue_date)!=2013;
    
    -- Write a query to display issue id, employee id, employee name, item id, item description and issue date.  
    -- Display the data in descending order of date and then by issue id in ascending order
    
    select issue_id,em.employee_id,em.employee_name,im.item_id,item_description,issue_date from employee_issue_details eid
    join employee_master em on eid.employee_id=em.employee_id
    JOIN item_master im on im.item_id=eid.item_id
    order by issue_date desc,issue_id asc;
    
    -- Write a query to display the employee id, employee name and total valuation for employee who has issued 
    -- maximum total valuation of the product; Give the alias name for total valuation as TOTAL_VALUATION;
    -- [Hint: Suppose an employee E00019 issued item of price 5000, 10000, 12000 and E00020 issue item of price 2000,
    -- 7000, and 1000. So the valuation of items taken by E00019 is 27000 and for E00020 it is 10000. 
    -- So the employee id, employee name and total valuation of E00019 should display.

    select em.employee_id,em.employee_name,sum(item_valuation) as TOTAL_VALUATION 
    from employee_master em
    join employee_issue_details eid on eid.employee_id=em.employee_id
    join item_master im on im.item_id=eid.item_id
    group by em.employee_id
    order by 3 desc limit 1;
